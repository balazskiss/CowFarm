<?xml version="1.0"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
    creationComplete="init();">

    <mx:Script><![CDATA[

        import flash.system.Security;
        import flash.external.ExternalInterface;
        import remoting.*;

        private var _socket:RemotingSocket;

        private var connect_cb:String       = null;
        private var disconnect_cb:String    = null;
        private var recieve_cb:String       = null;
        private var ioerror_cb:String       = null;
        private var securityerror_cb:String = null;
        private var progressevent_cb:String = null;
            
        private function connect(server:String,port:int):void
        {
            try
            {
                dbg("Flash Connecting to "+server+":"+port.toString());
    
                _socket = new RemotingSocket(server,port);
                _socket.addEventListener("newRemotingMsg",remotingSocketHandler);
            
                _socket.addEventListener(Event.CONNECT, function(e:Event):void
                {
                    handleEvent(e,connect_cb);
                });
    
                _socket.addEventListener(Event.CLOSE, function(e:Event):void
                { 
                    handleEvent(e,disconnect_cb);
                });
    
                _socket.addEventListener(IOErrorEvent.IO_ERROR, function(e:Event):void
                { 
                    handleEvent(e,ioerror_cb);
                });
    
                _socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function(e:Event):void
                { 
                    handleEvent(e,securityerror_cb);
                });
    
                _socket.addEventListener(ProgressEvent.SOCKET_DATA, function(e:Event):void
                { 
                    handleEvent(e,progressevent_cb);
                });
            }
            catch (err:IOErrorEvent)
            {
                dbg("Flash Error: "+err.toString());
            }
        }

        private function handleEvent(event:Event,callback:String):void
        {
            dbg(event.toString());

            if(callback != null)
                ExternalInterface.call(callback);
        }

        private function remotingSocketHandler(event:RemotingEvent):void
        {
            dbg("Flash Recieved : " + event.toString());

            if(recieve_cb != null)
                ExternalInterface.call(recieve_cb,event.message);
        }

        private function write(str:String):void
        {
            dbg("Flash Writing : " + str);
            _socket.write(str);
        }

        private function disconnect():void
        {
            dbg("Flash Closing Socket");
            _socket.close();

            // Shouldnt flash call this?
            if(!_socket.connected)
                handleEvent(new Event("Fake Disconnect Event"),disconnect_cb);
        }

        private function setCallBack(str:String,fun:String):void
        {

            dbg("Flash Set Callback for " + str + " to " + fun);

            switch (str) 
            {
                case "connect" :       connect_cb = fun;        break;
                case "disconnect" :    disconnect_cb = fun;     break;
                case "recieve" :       recieve_cb = fun;        break;
                case "ioerror" :       ioerror_cb = fun;        break;
                case "securityerror" : securityerror_cb = fun;  break;
                case "progressevent" : progressevent_cb = fun;  break;
            }
        }

        private function init():void
        {
            dbg("Flash initialised, calling jssocket_init");
    
            try
            {
                ExternalInterface.addCallback("setCallBack",setCallBack);
                ExternalInterface.addCallback("connect",connect);
                ExternalInterface.addCallback("write",write);
                ExternalInterface.addCallback("disconnect",disconnect);
                ExternalInterface.call("jssocket_init");
            }
            catch (err:Error)
            {
                dbg("Flash Error: "+err.toString());
            }
        }

        private function dbg(msg:String):void
        {
            debug.text += msg + "\n";
        }

    ]]></mx:Script>

    <mx:TextArea id="debug" width="100%" height="100%" />

</mx:Application>
